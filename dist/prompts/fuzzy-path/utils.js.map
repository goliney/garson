{"version":3,"sources":["../../../src/prompts/fuzzy-path/utils.ts"],"names":["readdir","util","promisify","fs","HIGHLIGHT_SYMBOL_START","HIGHLIGHT_SYMBOL_END","listNodes","nodePath","root","relativeRoot","nodes","currentNode","isDir","path","relativePath","relative","highlightedRelativePath","length","nodesWithPath","map","nodeName","join","subNodes","Promise","all","reduce","acc","val","concat","err","code","fuzzySearchNodes","pattern","node","indices","fuzzy","FuzzySearch","source","keys","token_field_min_length","highlight_before","highlight_after","results","search","item","highlight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAmBA,MAAMA,OAAO,GAAGC,cAAKC,SAAL,CAAeC,YAAGH,OAAlB,CAAhB;;AAEO,MAAMI,sBAAsB,GAAG,0BAA/B;;AACA,MAAMC,oBAAoB,GAAG,wBAA7B;;;SAEeC,S;;;;;iCAAf,WAAyBC,QAAzB,EAA2CC,IAA3C,EAA+E;AACpF,UAAMC,YAAY,GAAGD,IAAI,IAAID,QAA7B;;AACA,QAAI;AACF,YAAMG,KAAK,SAASV,OAAO,CAACO,QAAD,CAA3B;AACA,YAAMI,WAAW,GAAG,CAClB;AACEC,QAAAA,KAAK,EAAE,IADT;AAEEC,QAAAA,IAAI,EAAEN,QAFR;AAGEO,QAAAA,YAAY,EAAED,cAAKE,QAAL,CAAcN,YAAd,EAA4BF,QAA5B,CAHhB;AAIES,QAAAA,uBAAuB,EAAE;AAJ3B,OADkB,CAApB;;AAQA,UAAIN,KAAK,CAACO,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAON,WAAP;AACD;;AACD,YAAMO,aAAa,GAAGR,KAAK,CAACS,GAAN,CAAUC,QAAQ,IACtCd,SAAS,CAACO,cAAKQ,IAAL,CAAUd,QAAV,EAAoBa,QAApB,CAAD,EAAgCX,YAAhC,CADW,CAAtB;AAGA,YAAMa,QAAQ,SAASC,OAAO,CAACC,GAAR,CAAYN,aAAZ,CAAvB;AACA,aAAOI,QAAQ,CAACG,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,MAAJ,CAAWD,GAAX,CAA9B,EAA+ChB,WAA/C,CAAP;AACD,KAlBD,CAkBE,OAAOkB,GAAP,EAAY;AACZ,UAAIA,GAAG,CAACC,IAAJ,KAAa,SAAjB,EAA4B;AAC1B,eAAO,CACL;AACElB,UAAAA,KAAK,EAAE,KADT;AAEEC,UAAAA,IAAI,EAAEN,QAFR;AAGEO,UAAAA,YAAY,EAAED,cAAKE,QAAL,CAAcN,YAAd,EAA4BF,QAA5B,CAHhB;AAIES,UAAAA,uBAAuB,EAAE;AAJ3B,SADK,CAAP;AAQD;;AACD,aAAO,EAAP;AACD;AACF,G;;;;AAEM,SAASe,gBAAT,CAA0BrB,KAA1B,EAAoDsB,OAApD,EAAiF;AACtF,MAAI,CAACtB,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AAED,MAAI,CAACsB,OAAL,EAAc;AACZ,WAAOtB,KAAK,CAACS,GAAN,CAAUc,IAAI,sBAAUA,IAAV;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,MAAd,CAAP;AACD;;AAED,QAAMC,KAAK,GAAG,IAAIC,iBAAJ,CAA0B;AACtCC,IAAAA,MAAM,EAAE3B,KAD8B;AAEtC4B,IAAAA,IAAI,EAAE,cAFgC;AAGtCC,IAAAA,sBAAsB,EAAE,CAHc;AAGX;AAC3BC,IAAAA,gBAAgB,EAAEpC,sBAJoB;AAKtCqC,IAAAA,eAAe,EAAEpC;AALqB,GAA1B,CAAd;AAQA,QAAMqC,OAAO,GAAGP,KAAK,CAACQ,MAAN,CAAaX,OAAb,CAAhB;AAEA,SAAOU,OAAO,CAACvB,GAAR,CAAYyB,IAAI,sBAClBA,IADkB;AAErB5B,IAAAA,uBAAuB,EAAEmB,KAAK,CAACU,SAAN,CAAgBD,IAAI,CAAC9B,YAArB;AAFJ,IAAhB,CAAP;AAID","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport util from 'util';\nimport FuzzySearch from 'fz-search';\n\nexport type Indices = [number, number][];\n\nexport interface PathNode {\n  isDir: boolean;\n  path: string;\n  relativePath: string;\n  highlightedRelativePath: string;\n}\n\nexport interface PathNodeMatched extends PathNode {\n  indices: Indices;\n}\n\ninterface FuseResultMatches {\n  indices: Indices;\n}\n\nconst readdir = util.promisify(fs.readdir);\n\nexport const HIGHLIGHT_SYMBOL_START = '<HIGHLIGHT_SYMBOL_START>';\nexport const HIGHLIGHT_SYMBOL_END = '<HIGHLIGHT_SYMBOL_END>';\n\nexport async function listNodes(nodePath: string, root?: string): Promise<PathNode[]> {\n  const relativeRoot = root || nodePath;\n  try {\n    const nodes = await readdir(nodePath);\n    const currentNode = [\n      {\n        isDir: true,\n        path: nodePath,\n        relativePath: path.relative(relativeRoot, nodePath),\n        highlightedRelativePath: '',\n      },\n    ];\n    if (nodes.length === 0) {\n      return currentNode;\n    }\n    const nodesWithPath = nodes.map(nodeName =>\n      listNodes(path.join(nodePath, nodeName), relativeRoot),\n    );\n    const subNodes = await Promise.all(nodesWithPath);\n    return subNodes.reduce((acc, val) => acc.concat(val), currentNode);\n  } catch (err) {\n    if (err.code === 'ENOTDIR') {\n      return [\n        {\n          isDir: false,\n          path: nodePath,\n          relativePath: path.relative(relativeRoot, nodePath),\n          highlightedRelativePath: '',\n        },\n      ];\n    }\n    return [];\n  }\n}\n\nexport function fuzzySearchNodes(nodes: PathNode[] | null, pattern: string): PathNode[] {\n  if (!nodes) {\n    return [];\n  }\n\n  if (!pattern) {\n    return nodes.map(node => ({ ...node, indices: [] }));\n  }\n\n  const fuzzy = new FuzzySearch<PathNode>({\n    source: nodes,\n    keys: 'relativePath',\n    token_field_min_length: 1, // start searching with a query this long\n    highlight_before: HIGHLIGHT_SYMBOL_START,\n    highlight_after: HIGHLIGHT_SYMBOL_END,\n  });\n\n  const results = fuzzy.search(pattern);\n\n  return results.map(item => ({\n    ...item,\n    highlightedRelativePath: fuzzy.highlight(item.relativePath),\n  }));\n}\n"],"file":"utils.js"}