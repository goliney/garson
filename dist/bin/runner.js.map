{"version":3,"sources":["../../src/bin/runner.tsx"],"names":["debug","rerender","unmount","runner","results","prompts","action","prompt","key","rest","result","newResults","length","actionResponse"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;gBAG8B,iBAAO,6BAAC,QAAD,0BAAP,EAAmC;AAC/DA,EAAAA,KAAK,EAAE;AADwD,CAAnC,C;MAAtBC,Q,WAAAA,Q;MAAUC,O,WAAAA,O;;AAIX,SAASC,MAAT,CAAgB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA;AAApB,CAAhB,EAA4D;AAAA,4BAC9BD,OAD8B;AAAA;AAAA,QACxDE,MADwD,aACxDA,MADwD;AAAA,QAChDC,GADgD,aAChDA,GADgD;AAAA,QACtCC,IADsC;;AAEjER,EAAAA,QAAQ,CACNM,MAAM,CAACG,MAAM,IAAI;AACfT,IAAAA,QAAQ,CAAC,6BAAC,cAAD,CAAO,QAAP,OAAD,CAAR,CADe,CACe;;AAC9B,UAAMU,UAAU,qBAAQP,OAAR;AAAiB,OAACI,GAAD,GAAOE;AAAxB,MAAhB;;AACA,QAAID,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACrB;AACA,YAAMC,cAAc,GAAGP,MAAM,CAACK,UAAD,CAA7B;;AACA,UAAIE,cAAJ,EAAoB;AAClBV,QAAAA,MAAM,CAACU,cAAD,CAAN;AACD,OAFD,MAEO;AACLX,QAAAA,OAAO;AACR;AACF,KARD,MAQO;AACL;AACAC,MAAAA,MAAM,CAAC;AAAEC,QAAAA,OAAO,EAAEO,UAAX;AAAuBN,QAAAA,OAAO,EAAEI,IAAhC;AAAsCH,QAAAA;AAAtC,OAAD,CAAN;AACD;AACF,GAfK,CADA,CAAR;AAkBD","sourcesContent":["import React from 'react';\nimport { Box, render } from 'ink';\nimport { GarsonConfig } from '../types';\n\nconst { rerender, unmount } = render(<Box>Initializing...</Box>, {\n  debug: false,\n});\n\nexport function runner({ results, prompts, action }: GarsonConfig) {\n  const [{ prompt, key }, ...rest] = prompts;\n  rerender(\n    prompt(result => {\n      rerender(<React.Fragment />); // clear the previous prompt from the screen\n      const newResults = { ...results, [key]: result };\n      if (rest.length === 0) {\n        // it was the last prompt in a chain\n        const actionResponse = action(newResults);\n        if (actionResponse) {\n          runner(actionResponse);\n        } else {\n          unmount();\n        }\n      } else {\n        // there is another prompt\n        runner({ results: newResults, prompts: rest, action });\n      }\n    }),\n  );\n}\n"],"file":"runner.js"}